import os
from pptx import Presentation
import re
import logging
import requests
from openai import AzureOpenAI
from bs4 import BeautifulSoup
import tiktoken
import argparse
from tenacity import (
    retry,
    stop_after_attempt,
    wait_random_exponential,
)

# parse the argument and extract the deck id as well as OpenAI API endpoint and credentials
parser = argparse.ArgumentParser()
parser.add_argument('--endpoint', type=str, help="AOAI api endpoint")
parser.add_argument('--key', type=str, help="AOAI api key")
parser.add_argument('--deployment', type=str, default="gpt-4o", help="AOAI deployment")
parser.add_argument('--apiversion', type=str, default="2023-03-15-preview", help="AOAI API version")
parser.add_argument('deck', nargs=1, help='deck id like 2024_07')
args = parser.parse_args()

deck_id = args.deck[0]

# add file logging
logging.basicConfig(filename='process.log', level=logging.INFO)

base_dir = os.getcwd()
filename = os.path.join(base_dir, f"Source\\{deck_id} - Azure-Technical Update Briefing.pptx")
filename_out = os.path.join(base_dir, f"Annotated\\{deck_id} - Azure-Technical Update Briefing.pptx")

#make sure Source and Annotated folders exist under the base one
if(not os.path.exists("Source")):
    os.mkdir("Source")
if(not os.path.exists("Annotated")):
    os.mkdir("Annotated")


client = AzureOpenAI(
    api_key=args.key,  
    api_version=args.apiversion,
    azure_endpoint = args.endpoint
    )

def extract_urls(notes_text):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    urls = re.findall(url_pattern, notes_text)
    return urls

def download_url(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            text = soup.get_text()
            # replace multiple occurrences of newlines with a single newline
            text = re.sub(r'[\r\n]+', '\n', text)
            return text
        else:
            logging(f"Failed to download {url}")
            return None
    except:
        return None

def ensure_safe_content_len(content, max_tokens):
    encoding = tiktoken.get_encoding("cl100k_base")
    
    processed_content = content
    tokens = encoding.encode(content)
    while len(tokens) > max_tokens:
        cutoff = - 5 + len(processed_content) * max_tokens / len(tokens)
        processed_content = content[:int(cutoff)]
        tokens = encoding.encode(processed_content)
    return processed_content

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(5))
def summarize(content, topic):
    response = client.chat.completions.create(
      model="gpt-4o",
      messages=[
            {"role": "system", "content": "You are a helpful assistant helping the user to understand what a new Azure feature means in the context of company's business."},
            {"role": "user", "content": f"There's a new feature called '{topic}'. Help me explain it for an audience that may have not yet seen the service this feature is associated with and doesn't know what advantages this feature is bringing."},
            {"role": "assistant", "content": f"Here's what I found on the web. \n'---\n{content}"},
            {"role": "user", "content": "Summarize the content in a few sentences. If there's information about the current limitations of the offering, especially for preview features, explicitly mention it. If there is any information about the situation before the new feature has been introduced and how the new feature is solving a problem, share this information, otherwise simply summarize the input. Do not say anything else and don't try to be polite."}
        ]
    )
    try:
        first_choice = response.choices[0]
        message = first_choice.message
        summary = message.content
        logging.info("Summary for '" + topic + "': " + summary)
        return summary
    except Exception as ex:
        logging.error(ex)
        return "No summary found" 

def num_tokens_from_string(string: str) -> int:
    encoding = tiktoken.get_encoding("cl100k_base")
    num_tokens = len(encoding.encode(string))
    return num_tokens

def update_notes(slide, notes_text):
    logging.info(f"slide notes for {slide} are {notes_text}")
    notes_slide = slide.notes_slide
    notes_slide.notes_text_frame.text += "\n[Autogenerated summary]\n" + notes_text
    logging.info(f"slide notes for {slide} are set to {notes_slide.notes_text_frame.text}")


prs = Presentation(filename)
with open("out.txt", "w") as f:
    for slide in prs.slides:
        title = slide.shapes.title
        if(title):
            try:
                print(title.text)
                f.write(title.text)
                f.write('\n')
            except:
                print("Strange character")
                continue
        else:
            continue
        
        if(slide.has_notes_slide):
            notes_slide = slide.notes_slide
            if "Links from post:" not in notes_slide.notes_text_frame.text or "Autogenerated summary" in notes_slide.notes_text_frame.text:
                continue
            f.write(notes_slide.notes_text_frame.text)
            f.write('\n')
            notes_text = notes_slide.notes_text_frame.text
            urls = extract_urls(notes_text)
            content = ""
            for url in urls:
                try:
                    page_content = download_url(url)
                    if page_content:
                        content += "---\n" + page_content
                except:
                    logging.error("Failed to download page")
                    logging.error(url)
                    continue
            
            if len(content) > 10:
                response = summarize(ensure_safe_content_len(content, 8000), title.text)
                try:
                    f.write(response)
                    f.write('\n')
                except:
                    logging.error("Stranger characters around")
                    logging.error(content)
                    continue
                
                try:
                    logging.info("updating notes...")
                    update_notes(slide, response)
                except:
                    print("Stranger characters around")
                    continue

            prs.save(filename_out)